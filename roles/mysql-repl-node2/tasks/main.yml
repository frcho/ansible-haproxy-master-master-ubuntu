---
- name: install depences
  apt: pkg={{ item }}
  with_items:
    - mysql-server
    - libmysqlclient-dev
    - python-pip
    - python-dev

- name: install pip modules
  pip: name={{ item }}
  with_items:
    - mysql-python

- name: generate mysql root password
  shell:
    test -f /root/.my.cnf
    && (grep ^password /root/.my.cnf | head -1 | awk '{print $3}')
    || (cat /dev/urandom | tr -dc '[:alnum:]' | head -c 32)
  changed_when: False
  register: mysql_root_pass
- name: set mysql root password
  mysql_user:
    name=root
    host=localhost
    password={{ mysql_root_pass.stdout }}
- name: put .my.cnf
  template:
    src=root/.my.cnf.j2
    dest=/root/.my.cnf
    mode=600
- name: fetch .my.cnf
  fetch:
    src=/root/.my.cnf
    dest=tmp/.my.cnf
    flat=yes
  when: mysql_repl_role == "master"
- name: set mysql root password
  mysql_user:
    name=root
    host={{ item }}
    password={{ mysql_root_pass.stdout }}
  with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1

- name: Print mysql root password
  debug: var=mysql_root_pass.stdout
   
- name: generate mysql replication password
  shell:
    echo -n '{{ mysql_replication_pass }}' | awk '{print $3}'
     | tr -d '\n' | md5sum | awk '{print $1}'
  changed_when: False
  when: mysql_repl_role == "master"
  register: mysql_repl_pass

- name: Print mysql replication user password
  debug: var=mysql_repl_pass.stdout

# - name: Get ip node2 for node1
#   set_fact:
# #    ip: "{{ hostvars[inventory_hostname]['ansible_' + iface]['ipv4']['address'] }}"
#     ip: {{ mysql_ip_master_node2 }}
#   register: ip_host
#   when: ansible_hostname == "node1"
  
#- name: Get ip node1 for node2
#  set_fact:
#    ip: '10.200.19.21'
#  register: ip_host
#  when: ansible_hostname == "node2"

# - name: current host in {{ansible_hostname}}
#   debug: var=ip_host

- name: create replication user
  mysql_user:
    name={{ mysql_repl_user }}
    password={{ mysql_repl_pass.stdout }}
    host={{ mysql_ip_master_node1 }}
    priv='*.*:REPLICATION SLAVE'
  when: mysql_repl_role == "master"

- name: generate server-id
  shell:
    hostname -I | sed -e 's/ /\n/' | grep -v '^$'
    | tail -1 | awk -F. '{print $3 * 256 + $4}'
  changed_when: False
  register: mysql_server_id

- name: generate auto-increment
  shell:
    hostname | tr -dc '0-9' | awk -F . '{print $1}'
  changed_when: False
  register: mysql_auto_increment

- name: put my.cnf
  template:
    src=etc/mysql/my.cnf.j2
    dest=/etc/mysql/my.cnf
  register: last_result

- name: restart mysql
  service:
    name=mysql
    state=restarted
  when: last_result.changed

- name: check status of master
  mysql_replication: mode=getmaster
  ignore_errors: true
  delegate_to: "{{ mysql_ip_master_node1 }}"
  register: master
  when: mysql_repl_role == "master"

- name: stop replication
  mysql_replication: mode=stopslave
  when: mysql_repl_role == "master"

- name: Configure replication with data in node1
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_ip_master_node1 }}"
    master_user: "{{ mysql_repl_user }}"
    master_password: "{{ mysql_repl_pass.stdout }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  ignore_errors: True
  when: >
   (mysql_repl_role == 'master')


#- name: Ensure replication user exists on master.
#  mysql_user:
#    name: "{{ mysql_repl_user }}"
#    host: "{{ mysql_ip_master_node1 | default('%') }}"
#    password: "{{ mysql_repl_pass.stdout }}"
#    priv: '*.*:REPLICATION SLAVE'
#    state: present
#  when: >
#    (mysql_repl_role == 'master')
#    and mysql_repl_user

#- name: Check slave replication status.
#  mysql_replication: mode=getslave
#  ignore_errors: true
#  register: slave
#  when: >
#    mysql_repl_role == 'master'

- name: start replication
  mysql_replication: mode=startslave
  when: mysql_repl_role == "master"

# - name: check status of slaves
#   mysql_replication: mode=getslave
#   ignore_errors: true
#   register: slave_status
#   when: mysql_repl_role == "master"

# - name: create haproxy_check user
#   mysql_user:
#     name={{ haproxy_check_user }}
#     host={{ haproxy_ip }}
#     # state=absent
#   ignore_errors: True
#   when: slave_status.Slave_SQL_Running == "Yes"

# # Create database user with name 'haproxy_root' and password '{{mysql_haproxy_root_pass}}' with all database privileges and 'WITH GRANT OPTION'
# - name: create haproxy_root user
#   mysql_user:
#     name={{ haproxy_root_user }}
#     password={{ haproxy_root_mysql_pass }}
#     host={{ haproxy_ip }}
#     priv='*.*:ALL,GRANT'
#     # state=absent
#   ignore_errors: True
#   when: slave_status.Slave_SQL_Running == "Yes"

